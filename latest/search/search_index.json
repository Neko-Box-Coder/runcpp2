{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>runcpp2 is a simple declarable, scriptable, flexible cross-platform build system build system for c or c++</p> <ul> <li>\ud83d\ude80 Simple: <code>runcpp2 main.cpp</code>, this is all you need to get started</li> <li>\ud83d\udcdd Declarable: Quick, Concise, Minimal YAML format</li> <li>\ud83d\udd27 Scriptable: Customize, Run And Debug your build pipeline with c++, or just use it as a script.                       No longer need to juggle between CMake, Python, Bash, Batch, Lua, etc...</li> <li>\ud83e\ude9c Flexible: Only yaml for small project, c++ + yaml for larger ones</li> </ul>"},{"location":"#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<ul> <li>Any c or c++ compiler. The default user config only has g++ and msvc profiles. But feel free to add other compilers.</li> </ul>"},{"location":"#installation","title":"\ud83d\udce5\ufe0f Installation","text":"<p>You can either build from source or use the binary release</p> <p>Binary Release (Only Linux and Windows for now):  https://github.com/Neko-Box-Coder/runcpp2/releases</p> <p>Finally, you just need to add runcpp2 binary location to the <code>PATH</code> environment variable and  you can run c++ files anywhere you want.</p>"},{"location":"#getting-started","title":"\u26a1\ufe0f Getting Started","text":""},{"location":"#1-running-source-file-directly","title":"1. Running source file directly","text":"<p>Suppose you have a c++ file called <code>script.cpp</code>, you can run it immediately by doing </p> <pre><code>runcpp2 ./script.cpp &lt;any arguments&gt;\n</code></pre> Example script.cpp<pre><code>#include &lt;iostream&gt;\nint main(int argc, char** argv)\n{\n    if(argc != 2)\n    {\n        std::cout &lt;&lt; \"Usage: runcpp2 ./script.cpp &lt;Name&gt;\"\n        return 1;\n    }\n\n    std::cout &lt;&lt; \"Hello \" &lt;&lt; argv[1] &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>Note</p> <p>On Unix, if you have added runcpp2 to your PATH and add this line <code>//bin/true;runcpp2 \"$0\" \"$@\"; exit $?;</code>  to the top of your script, you can run the script directly by <code>./script.cpp &lt;arguments&gt;</code></p> Example script.cpp<pre><code>//bin/true;runcpp2 \"$0\" \"$@\"; exit $?;\n#include &lt;iostream&gt;\nint main(int, char**) { std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl; }\n</code></pre>"},{"location":"#2-watch-and-give-compile-errors","title":"2. Watch and give compile errors","text":"<p>If you want to edit the script but want to have feedback for any error, you can use \"watch\" mode.</p> shell<pre><code>runcpp2 --watch ./script.cpp\n</code></pre>"},{"location":"#3-sepcifying-build-settings","title":"3. Sepcifying Build Settings","text":"<p>Build settings such as compile/link flags, external dependencies, command hooks, etc. can be spcified inlined inside a source file or as a separate yaml file in the format of YAML</p> <ul> <li>To specify build settings in a dedicated yaml file:<ul> <li>The yaml file in the same directory and share the same as the source file being run will be used</li> </ul> </li> <li>To specify inline build settings inside a source file: <ul> <li>Put them inside a comment with <code>runcpp2</code> at the beginning of the build settings</li> <li>The inline build settings can exist in anywhere of the source file</li> <li>Both inline (but continuous) comments (<code>//</code>) and block comments are supported (<code>/* */</code>)</li> </ul> </li> </ul> Example Inline Build Settings <p>script.cpp<pre><code>/*runcpp2\nOverrideCompileFlags:\n    DefaultPlatform:\n        \"g++\":\n            Append: \"-Wfloat-equal -Wextra\"\n*/\nint main(int, char**) { float a = 1.f; float b = 1.f; return a == b ? 0 : 1; }\n</code></pre> shell<pre><code>runcpp2 script.cpp\n</code></pre></p> Example Dedicated Build Settings <p>script.yaml<pre><code>OverrideCompileFlags:\n    DefaultPlatform:\n        \"g++\":\n            Append: \"-Wfloat-equal -Wextra\"\n</code></pre> script.cpp<pre><code>int main(int, char**) { float a = 1.f; float b = 1.f; return a == b ? 0 : 1; }\n</code></pre> shell<pre><code>runcpp2 script.cpp\n</code></pre></p> <p>For a complete list of build settings, see Build Settings or generate the template with <pre><code>runcpp2 --create-script-template ./script.cpp   # Embeds the build settings template as comment\nruncpp2 --create-script-template ./script.yaml  # Creates the build settings template as dedicated yaml file\nruncpp2 -t ./script.cpp                         # Short form\n</code></pre></p>"},{"location":"build_settings/","title":"Build Settings","text":""},{"location":"build_settings/#template","title":"Template","text":"<pre><code># This is the template for specifying build settings.\n# Many of the settings are passed directly to the shell.\n# Be cautious when using user-provided input in your build commands to avoid potential security risks.\n# Output from commands such as Setup or Cleanup won't be shown unless log level is set to info.\n# If the default is not mentioned for a setting, it will be empty.\n\n# Each of the platform dependent settings can be listed under\n# - DefaultPlatform\n# - Windows\n# - Linux\n# - MacOS\n# - Unix\n\n# You can find all the profiles in your config folder. \n# This can be found by running `runcpp2 --show-config-path`. \n# Specifying \"DefaultProfile\" in the profile name will allow any profiles \n#   and use the user's preferred one.\n\n# (Optional) Whether to pass the script path as the second parameter when running. Default is false\nPassScriptPath: false\n\n# (Optional) Language of the script. Default is determined by file extension\nLanguage: \"c++\"\n\n# TODO: Rename this\n# (Optional) Allowed profiles for the script for each platform.\n#            Any profiles will be used if none is specified for the platform. \nRequiredProfiles: \n    Windows: [\"g++\"]\n    Linux: [\"g++\"]\n    MacOS: [\"g++\"]\n\n# (Optional) Override the default compile flags for each platform.\nOverrideCompileFlags:\n    # Target Platform\n    DefaultPlatform:\n        # Profile with the respective flags to override\n        \"g++\":\n            # (Optional) Flags to be removed from the default compile flags, separated by space\n            Remove: \"\"\n\n            # (Optional) Additional flags to be appended to the default compile flags, separated by space\n            Append: \"\"\n\n# (Optional) Override the default link flags for each platform.\nOverrideLinkFlags:\n    # Target Platform\n    DefaultPlatform:\n        # Profile with the respective flags to override\n        \"g++\":\n            # (Optional) Flags to be removed from the default link flags, separated by space\n            Remove: \"\"\n\n            # (Optional) Additional flags to be appended to the default link flags, \n            #            separated by space\n            Append: \"\"\n\n# (Optional) Other source files (relative to script file path) to be compiled.\nOtherFilesToBeCompiled:\n    # Target Platform\n    DefaultPlatform:\n        # Target Profile\n        DefaultProfile:\n        -   \"./AnotherSourceFile.cpp\"\n\n# (Optional) Include paths (relative to script file path) for each platform and profile\nIncludePaths:\n    # Target Platform\n    DefaultPlatform:\n        # Target Profile\n        DefaultProfile:\n        -   \"./include\"\n        -   \"./src/include\"\n\n# (Optional) Define cross-compiler defines for each platform and profile.\n#            Defines can be specified as just a name or as a name-value pair.\nDefines:\n    # Target Platform\n    DefaultPlatform:\n        # Profile name\n        DefaultProfile:\n        -   \"EXAMPLE_DEFINE\"              # Define without a value\n        -   \"VERSION_MAJOR=1\"             # Define with a value\n\n# (Optional) Setup commands are run once before the script is first built.\n#            These commands are run at the script's location when no build directory exists.\nSetup:\n    # Target Platform\n    DefaultPlatform:\n        # Profile name\n        DefaultProfile:\n        # List of setup commands\n        -   \"echo Setting up script...\"\n\n# (Optional) PreBuild commands are run before each build.\n#            These commands are run in the build directory before compilation starts.\nPreBuild:\n    # Target Platform\n    DefaultPlatform:\n        # Profile name\n        DefaultProfile:\n        -   \"echo Starting build...\"\n\n# (Optional) PostBuild commands are run after each successful build.\n#            These commands are run in the output directory where binaries are located.\nPostBuild:\n    # Target Platform\n    DefaultPlatform:\n        # Profile name\n        DefaultProfile:\n        -   \"echo Build completed...\"\n\n# (Optional) Cleanup commands are run when using the --cleanup option.\n#            These commands are run at the script's location before the build directory is removed.\nCleanup:\n    # Target Platform\n    DefaultPlatform:\n        # Profile name\n        DefaultProfile:\n        -   \"echo Cleaning up script...\"\n\n# (Optional) The list of dependencies needed by the script\nDependencies:\n    # Dependency name\n-   Name: MyLibrary\n\n    # Supported platforms of the dependency\n    Platforms: [Windows, Linux, MacOS]\n\n    # The source of getting the dependency (Git, Local)\n    # Either Git or Local can exist, not both\n    Source:\n        # (Optional) Import dependency configuration from a YAML file if this field exists\n        #            For Git source: Path is relative to the git repository root\n        #            For Local source: Path is relative to the script directory.\n        #            If neither source exists, local source with root script directory is assumed.\n        ImportPath: \"config/dependency.yaml\"\n\n        # Dependency or import YAML file exists in a git server, and needs to be cloned.\n        Git:\n            # Git repository URL\n            URL: \"https://github.com/MyUser/MyLibrary.git\"\n\n        # Dependency or import YAML file exists in local filesystem directory\n        Local:\n            # Path to the library directory\n            Path: \"./libs/LocalLibrary\"\n\n\n    # Library Type (Static, Object, Shared, Header)\n    LibraryType: Static\n\n    # (Optional) Paths to be added to the include paths, relative to the dependency folder\n    IncludePaths:\n    -   \"src/include\"\n\n    # (Optional if LibraryType is Header) Link properties of the dependency\n    LinkProperties:\n        # Properties for searching the library binary for each platform\n        DefaultPlatform:\n            # Profile-specific properties\n            \"g++\":\n                # The library names to be searched for when linking against the script. \n                # Binaries with linkable extension that contains one of the names will be linked\n                SearchLibraryNames: [\"MyLibrary\"]\n\n                # (Optional) The library names to be excluded from being searched.\n                #            Works the same as SearchLibraryNames but will NOT be linked instead\n                ExcludeLibraryNames: []\n\n                # The path (relative to the dependency folder) to be searched for the dependency binaries\n                SearchDirectories: [\"./build\"]\n\n                # (Optional) Additional link flags for this dependency\n                AdditionalLinkOptions: []\n\n    # (Optional) Setup commands are run once when the dependency is populated\n    Setup:\n        # Target Platform\n        DefaultPlatform:\n            # Setup shell commands for the specified profile. \n            # Default commands are run in the dependency folder\n            # You can also use \"DefaultProfile\" if all the compilers run the same setup commands\n            \"g++\":\n            -   \"mkdir build\"\n\n\n    # (Optional) Build commands are run every time before the script is being built\n    Build:\n        # Target Platform\n        DefaultPlatform:\n            # Target Profile\n            \"g++\":\n            -   \"cd build &amp;&amp; cmake ..\"\n            -   \"cd build &amp;&amp; cmake --build .\"\n\n    # (Optional) Cleanup commands are run when the reset option is present. Normally nothing needs\n    #            to be done since the dependency folder will be removed automatically.\n    Cleanup:\n        # Target Platform\n        Linux:\n            # Target Profile\n            \"g++\":\n            -   \"sudo apt purge MyLibrary\"\n\n    # (Optional) Files to be copied to next to output binary for each platform and profile\n    FilesToCopy:\n        # Target Platform\n        DefaultPlatform:\n            # Profile name\n            DefaultProfile:\n            # List of files to copy (relative to the dependency folder)\n            -  \"assets/textures/sprite.png\"\n        Windows:\n            \"msvc\":\n            -  \"assets/textures/sprite.png\"\n            -  \"assets/fonts/windows_specific_font.ttf\"\n        Linux:\n            \"g++\":\n            -  \"assets/textures/sprite.png\"\n            -  \"assets/shaders/linux_optimized_shader.glsl\"\n</code></pre>"},{"location":"program_manual/","title":"Program Manual","text":""},{"location":"program_manual/#usage","title":"Usage","text":"<p><code>runcpp2 [options] [input_file]</code></p>"},{"location":"program_manual/#options","title":"Options","text":"<pre><code>Run/Build:\n  -b,  --[b]uild                          Build the script and copy output files to the working directory\n  -w,  --[w]atch                          Watch script changes and output any compiling errors\n  -l,  --[l]ocal                          Build in the current working directory under .runcpp2 directory\n  -e,  --[e]xecutable                     Runs as executable instead of shared library\n  -c,  --[c]onfig &lt;file&gt;                  Use specified config file instead of default\n  -t,  --create-script-[t]emplate &lt;file&gt;  Creates/prepend runcpp2 script info template\n  -s,  --build-[s]ource-only              (Re)Builds source files only without building dependencies.\n                                          The previous built binaries will be used for dependencies.\n                                          Requires dependencies to be built already.\nReset/Cleanup:\n  -rc, --[r]eset-[c]ache                  Deletes compiled source files cache only\n  -ru, --[r]eset-[u]ser-config            Replace current user config with the default one\n  -rd, --[r]eset-[d]ependencies &lt;names&gt;   Reset dependencies (comma-separated names, or \"all\" for all)\n  -cu, --[c]lean[u]p                      Run cleanup commands and remove build directory\nSettings:\n  -sc, --[s]how-[c]onfig-path             Show where runcpp2 is reading the config from\n  -v,  --[v]ersion                        Show the version of runcpp2\n  -h,  --[h]elp                           Show this help message\n       --log-level &lt;level&gt;                Sets the log level (Normal, Info, Debug) for runcpp2.\n</code></pre>"},{"location":"user_config/","title":"User Config","text":""},{"location":"user_config/#default","title":"Default","text":"<pre><code># List of anchors that will be aliased later\nTemplates:\n    MSVC_CompileFlags: &amp;MSVC_CompileFlags\n        Flags: \"/nologo /W4 /diagnostics:caret /D NDEBUG /utf-8 /Gm- /MD /EHa /TP /std:c++17 /GR /TP\"\n\n    \"g++_CompileRunParts\": &amp;g++_CompileRunParts\n    -   Type: Once\n        CommandPart: \"{Executable} -c {CompileFlags}\"\n    -   Type: Repeats\n        CommandPart: \" -D{DefineNameOnly}=\"\n    -   Type: Repeats\n        CommandPart: \" \\\"-D{DefineName}={DefineValue}\\\"\"\n    -   Type: Repeats\n        CommandPart: \" -I\\\"{IncludeDirectoryPath}\\\"\"\n    -   Type: Once\n        CommandPart: \" \\\"{InputFilePath}\\\" -o \\\"{OutputFilePath}\\\"\"\n\n    \"g++_LinkRunParts\": &amp;g++_LinkRunParts\n    -   Type: Once\n        CommandPart: \"{Executable} {LinkFlags} -o \\\"{OutputFilePath}\\\"\"\n    -   Type: Repeats\n        CommandPart: \" \\\"{LinkFilePath}\\\"\"\n\n    \"vs2022_v17+_CompileRunParts\": &amp;vs2022_v17+_CompileRunParts\n    -   Type: Once\n        CommandPart: \"{Executable} /c {CompileFlags}\"\n    -   Type: Repeats\n        CommandPart: \" /D{DefineNameOnly}=\"\n    -   Type: Repeats\n        CommandPart: \" \\\"/D{DefineName}={DefineValue}\\\"\"\n    -   Type: Repeats\n        CommandPart: \" /I\\\"{IncludeDirectoryPath}\\\"\"\n    -   Type: Once\n        CommandPart: \" /Fo\\\"{OutputFilePath}\\\" \\\"{InputFilePath}\\\"\"\n\n    \"vs2022_v17+_LinkRunParts\": &amp;vs2022_v17+_LinkRunParts\n    -   Type: Once\n        CommandPart: \"{Executable} {LinkFlags} /OUT:\\\"{OutputFilePath}\\\"\"\n    -   Type: Repeats\n        CommandPart: \" \\\"{LinkFilePath}\\\"\"\n\n    # The following fields set the prefixes and extensions for each type of the files\n    # If the name of an object files are libtest.so and libtest2.so,\n    #   the prefixes and extensions are \"lib\" and \".so\"\n\n    # TODO: Add support for custom platform\n    # Each of the platform dependent settings can be listed under\n    # - DefaultPlatform\n    # - Windows\n    # - Linux\n    # - MacOS\n    # - Unix\n    FilesTypes: &amp;CommonFilesTypes\n        ObjectLinkFile:\n            Prefix:\n                DefaultPlatform: \"\"\n            Extension:\n                Windows: \".obj\"\n                Unix: \".o\"\n\n        # The file properties for the files to be **linked** as shared libraries for each platform\n        SharedLinkFile:\n            Prefix:\n                Windows: \"\"\n                Linux: \"lib\"\n                MacOS: \"\"\n            Extension:\n                Windows: \".lib\"\n                Linux: \".so\"\n                MacOS: \".dylib\"\n\n        # The file properties for the files to be **copied** as shared libraries for each platform\n        SharedLibraryFile:\n            Prefix:\n                Windows: \"\"\n                Linux: \"lib\"\n                MacOS: \"\"\n            Extension:\n                Windows: \".dll\"\n                Linux: \".so\"\n                MacOS: \".dylib\"\n\n        # The file properties for the files to be linked as static libraries for each platform\n        StaticLinkFile:\n            Prefix:\n                Unix: \"lib\"\n                Windows: \"\"\n            Extension:\n                Windows: \".lib\"\n                Unix: \".a\"\n\n        # (Optional) The file properties for debug symbols to be copied alongside the binary \n        #               for each platform\n        DebugSymbolFile:\n            Prefix:\n                Windows: \"\"\n                Unix: \"\"\n            Extension:\n                Windows: \"\"\n                Unix: \"\"\n\n# WARNING: All command substitutions in this file are passed directly to the shell.\n#          Exercise caution when using variables or user-provided input in your build commands\n#          to prevent potential security vulnerabilities.\n\n# A profile to be used if not specified while running the build script\nPreferredProfile: \"g++\"\n\n# List of compiler/linker profiles that instruct how to compile/link\nProfiles:\n    # Name (case sensitive) of the profile that can be queried from a script\n-   Name: \"g++\"\n\n    # (Optional) Name aliases (case sensitive) of the current profile\n    NameAliases: [\"mingw\"]\n\n    # The file extensions associated with the profile\n    FileExtensions: [.cpp, .cc, .cxx]\n\n    # The languages supported by the profile\n    Languages: [\"c++\"]\n\n    # (Optional) The commands to run in **shell** before calling the compiler/linker for each platform.\n    #            This is run inside the .runcpp2 directory where the build happens.\n    # Setup: \n    #     DefaultPlatform: []\n\n    # (Optional) The commands to run in **shell** after calling the compiler/linker for each platform.\n    #            This is run inside the .runcpp2 directory where the build happens.\n    # Cleanup: \n    #     DefaultPlatform: []\n\n    # The file properties for the object files for each platform.\n    FilesTypes: *CommonFilesTypes\n\n    # Specify the compiler settings\n    Compiler:\n        # (Optional) The command to be prepend for each compile command in **shell** for each platform\n        # PreRun: \n        #     DefaultPlatform: \"\"\n\n        # Shell command to use for checking if the executable exists or not\n        CheckExistence: \n            DefaultPlatform: \"g++ -v\"\n\n        # Here are a list of substitution strings for RunParts, Setup and Cleanup\n        # {Executable}:             Compiler executable\n        # {CompileFlags}:           Compile flags from config and override\n        # {IncludeDirectoryPath}:   Path to include directories for both the script and dependencies\n        # {DefineNameOnly}:         Name of a macro to be defined without a value (equivalent to #define X)\n        # {DefineName}:             Name of a macro to be defined with a value\n        # {DefineValue}:            Value of a macro to be defined (used with {DefineName})\n\n        # {InputFileName}:          Name of the input file (without directory path and extension)\n        # {InputFileExtension}:     Extension of the input file\n        # {InputFileDirectory}:     Directory of the input file\n        # {InputFilePath}:          Full path to the input file\n\n        # {OutputFileName}:         Name of the output (object) file (without directory path and extension)\n        # {OutputFileExtension}:    (Similar to previous)\n        # {OutputFileDirectory}:    (Similar to previous)\n        # {OutputFilePath}:         (Similar to previous)\n        CompileTypes:\n            Executable:\n                DefaultPlatform:\n                    Flags: \"-std=c++17 -Wall -g\"\n                    Executable: \"g++\"\n                    RunParts: *g++_CompileRunParts\n                    # (Optional) The commands to run in **shell** BEFORE compiling\n                    #            This is run inside the .runcpp2 directory where the build happens.\n                    # Setup: []\n                    # (Optional) The commands to run in **shell** AFTER compiling\n                    #            This is run inside the .runcpp2 directory where the build happens.\n                    # Cleanup: []\n            Static:\n                DefaultPlatform:\n                    Flags: \"-std=c++17 -Wall -g\"\n                    Executable: \"g++\"\n                    RunParts: *g++_CompileRunParts\n                    # Setup: []\n                    # Cleanup: []\n            Shared:\n                DefaultPlatform:\n                    Flags: \"-std=c++17 -Wall -g -fpic\"\n                    Executable: \"g++\"\n                    RunParts: *g++_CompileRunParts\n                    # Setup: []\n                    # Cleanup: []\n\n    # Specify the linker settings\n    Linker:\n        # (Optional) The command to be prepend for each link command in **shell** for each platform\n        # PreRun: \n        #     DefaultPlatform: \"\"\n\n        # Shell command to use for checking if the executable exists or not\n        CheckExistence:\n            DefaultPlatform: \"g++ -v\"\n\n        # Here are a list of substitution strings for RunParts, Setup and Cleanup\n        # {Executable}:                 Linker executable\n        # {LinkFlags}:                  Link flags from config and override\n\n        # {LinkFileName}:               Name of the file to be linked. Any files we are linking will be substituted\n        # {LinkFileExtension}:          (Similar to previous)\n        # {LinkFileDirectory}:          (Similar to previous)\n        # {LinkFilePath}:               (Similar to previous)\n\n        # {LinkObjectFileName}:         Name of the object file to be linked. Only object file will be substituted\n        # {LinkObjectFileExtension}:    (Similar to previous)\n        # {LinkObjectFileDirectory}:    (Similar to previous)\n        # {LinkObjectFilePath}:         (Similar to previous)\n\n        # {LinkSharedFileName}:         (Similar to previous)\n        # {LinkSharedFileExtension}:    (Similar to previous)\n        # {LinkSharedFileDirectory}:    (Similar to previous)\n        # {LinkSharedFilePath}:         (Similar to previous)\n\n        # {LinkStaticFileName}:         (Similar to previous)\n        # {LinkStaticFileExtension}:    (Similar to previous)\n        # {LinkStaticFileDirectory}:    (Similar to previous)\n        # {LinkStaticFilePath}:         (Similar to previous)\n\n        # {OutputFileName}:             (Similar to previous)\n        # {OutputFileExtension}:        (Similar to previous)\n        # {OutputFileDirectory}:        (Similar to previous)\n        # {OutputFilePath}:             (Similar to previous)\n        LinkTypes:\n            Executable:\n                Unix:\n                    Flags: \"-Wl,-rpath,\\\\$ORIGIN\"\n                    Executable: \"g++\"\n                    RunParts: *g++_LinkRunParts\n                    # Setup: []\n                    # Cleanup: []\n                Windows:\n                    Flags: \"-Wl,-rpath,\\\\$ORIGIN\"\n                    Executable: \"g++\"\n                    RunParts: *g++_LinkRunParts\n                    # Setup: []\n                    # Cleanup: []\n            Static:\n                DefaultPlatform:\n                    Flags: \"\"\n                    Executable: \"g++\"\n                    RunParts: *g++_LinkRunParts\n                    # Setup: []\n                    # Cleanup: []\n            Shared:\n                Unix:\n                    Flags: \"-shared -Wl,-rpath,\\\\$ORIGIN\"\n                    Executable: \"g++\"\n                    RunParts: *g++_LinkRunParts\n                    # Setup: []\n                    # Cleanup: []\n                Windows:\n                    Flags: \"-shared -Wl,-rpath,\\\\$ORIGIN\"\n                    Executable: \"g++\"\n                    RunParts: *g++_LinkRunParts\n                    # Setup: []\n                    # Cleanup: []\n\n# https://learn.microsoft.com/en-us/cpp/overview/compiler-versions?view=msvc-170\n-   Name: \"vs2022_v17+\"\n    NameAliases: [\"msvc1930+\", \"msvc\"]\n    Languages: [\"c++\"]\n    FileExtensions: [.cpp, .cc, .cxx]\n    FilesTypes: *CommonFilesTypes\n    Setup: \n        Windows:\n        -   &gt;-\n            for /f \"usebackq tokens=*\" %i in (`CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe\" \n            -version \"[17.0,18.0)\" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do ( \n            echo \"%i\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64 &gt; .\\prerun.bat\n            )\n    Cleanup: \n        Windows: [ \"del .\\\\prerun.bat\" ]\n    Compiler:\n        PreRun: \n            Windows: \".\\\\prerun.bat\"\n        CheckExistence: \n            Windows: \"where.exe CL.exe\"\n        CompileTypes:\n            Executable:\n                Windows:\n                    &lt;&lt;: *MSVC_CompileFlags\n                    Executable: \"CL.exe\"\n                    RunParts: *vs2022_v17+_CompileRunParts\n            Static:\n                Windows:\n                    &lt;&lt;: *MSVC_CompileFlags\n                    Executable: \"CL.exe\"\n                    RunParts: *vs2022_v17+_CompileRunParts\n            Shared:\n                Windows:\n                    &lt;&lt;: *MSVC_CompileFlags\n                    Executable: \"CL.exe\"\n                    RunParts: *vs2022_v17+_CompileRunParts\n    # Specify the linker settings\n    Linker:\n        PreRun: \n            Windows: \".\\\\prerun.bat\"\n        CheckExistence:\n            Windows: \"where.exe link.exe\"\n        LinkTypes:\n            Executable:\n                Windows:\n                    Flags: &gt;-\n                        /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib\n                        oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /manifest:embed /SUBSYSTEM:CONSOLE\n                    Executable: \"link.exe\"\n                    RunParts: *vs2022_v17+_LinkRunParts\n            Static:\n                Windows:\n                    Flags: \"/NOLOGO\"\n                    Executable: \"lib.exe\"\n                    RunParts: *vs2022_v17+_LinkRunParts\n            Shared:\n                Windows:\n                    Flags: &gt;-\n                        /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib\n                        oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /manifest:embed /SUBSYSTEM:CONSOLE\n                        /DLL\n                    Executable: \"link.exe\"\n                    RunParts:\n                    -   Type: Once\n                        CommandPart: \"{Executable} {LinkFlags} /OUT:\\\"{OutputFilePath}\\\" /DEF:\\\".\\\\temp.def\\\"\"\n                    -   Type: Repeats\n                        CommandPart: \" \\\"{LinkFilePath}\\\"\"\n                    Setup: [ \"echo EXPORTS &gt; .\\\\temp.def\", \"echo.   main @1 &gt;&gt; .\\\\temp.def\" ]\n                    Cleanup: [ \"del .\\\\temp.def\" ]\n</code></pre>"},{"location":"guides/basic_concepts/","title":"Basic Concepts","text":""},{"location":"guides/basic_concepts/#script-file","title":"Script File","text":"<p>A script file is your entry point source file (typically a .cpp file) that runcpp2 uses to build with the settings specified either:</p> <ul> <li> <p>As inline comments in the source file:   <pre><code>/*runcpp2\nRequiredProfiles:\n    Windows: [\"msvc\"]\n    Unix: [\"g++\"]\n*/\nint main() { return 0; }\n</code></pre></p> </li> <li> <p>Or as a separate YAML file with the same name:   <pre><code>script.cpp    # Your source file\nscript.yaml   # Your build settings\n</code></pre></p> </li> </ul> <p>The name of the final output will be the name of the script file, therefore a script file will always have a 1 to 1 relationship with the linker output, even if multiple sources are specified in the script file build settings. </p> <p>You can use any of your source files as a script file, or a dedicated .cpp file for building.</p>"},{"location":"guides/basic_concepts/#platforms-and-profiles","title":"Platforms And Profiles","text":"<p>runcpp2 uses platforms and profiles to organize build settings. </p> <p>Platforms represent different host operating systems (not the target platform), while profiles represent different compilers toolchains and their configurations.</p>"},{"location":"guides/basic_concepts/#list-of-platforms","title":"List Of Platforms","text":"<p>runcpp2 supports the following platforms:</p> <ul> <li>Windows</li> <li>Linux</li> <li>MacOS</li> <li>Unix (applies to Linux and MacOS)</li> </ul> <p>Custom platforms are currently not supported but planned for the future.</p>"},{"location":"guides/basic_concepts/#default-profiles","title":"Default Profiles","text":"<p>The default user configuration includes two compiler profiles:</p> <ul> <li>g++: GNU C++ compiler (with alias \"mingw\")</li> <li>vs2022_v17+: Visual Studio 2022 compiler (with aliases \"msvc1930+\", \"msvc\")</li> </ul>"},{"location":"guides/basic_concepts/#specifying-platformprofile-dependent-settings","title":"Specifying Platform/Profile Dependent Settings","text":"<p>Most build settings in runcpp2 follow this structure: <pre><code>&lt;Setting Name&gt;:\n    &lt;Platform A&gt;:\n        &lt;Profile A&gt;:\n            ...\n    &lt;Platform B&gt;:\n        &lt;Profile B&gt;:\n            ...\n</code></pre></p> Example <pre><code>OverrideCompileFlags:\n    Windows:\n        \"g++\":\n            Flags: \"-O2\"\n        \"msvc\":\n            Flags: \"/O2\"\n    Linux:\n        \"g++\":\n            Flags: \"-O3\"\n</code></pre> <p>There are two special keywords for more flexible configuration:</p> <ul> <li>DefaultPlatform: Settings that apply to any platform that doesn't have explicit settings</li> <li>DefaultProfile: Settings that apply to any profile that doesn't have explicit settings</li> </ul> <p>Important</p> <p>DefaultPlatform and DefaultProfile settings are not additive. For example: <pre><code>OverrideCompileFlags:\n    DefaultProfile:\n        Flags: \"-Wall\"\n    \"g++\":\n        Flags: \"-O2\"\n</code></pre> When using g++, only <code>-O2</code> will be used. When using any other profile, only <code>-Wall</code> will be used.</p> Wip <p>If you have a setting that only has DefaultPlatform and DefaultProfile, you can directly specify the settings without listing it under DefaultPlatform and DefaultProfile.</p> <p>For example: <pre><code>OverrideCompileFlags:\n    Flags: \"-Wall\"\n</code></pre> is equivalent to: <pre><code>OverrideCompileFlags:\n    DefaultPlatform:\n        DefaultProfile:\n            Flags: \"-Wall\"\n</code></pre></p>"},{"location":"guides/building_project_sources/","title":"Building Project Sources","text":""},{"location":"guides/building_project_sources/#specifying-build-type","title":"Specifying Build Type","text":"<p>(TODO)</p>"},{"location":"guides/building_project_sources/#editing-compile-and-link-flags","title":"Editing Compile And Link Flags","text":"<p>You can modify compile and link flags using <code>OverrideCompileFlags</code> and <code>OverrideLinkFlags</code>. Each setting supports two operations:</p> <ul> <li><code>Remove</code>: Remove flags from the default flags</li> <li><code>Append</code>: Add additional flags after the default flags</li> </ul> Example <pre><code>OverrideCompileFlags:\n    Windows:\n        \"msvc\":\n            Remove: \"/W3\"        # Remove default warning level\n            Append: \"/W4 /WX\"    # Use W4 and treat warnings as errors\n    DefaultPlatform:\n        \"g++\":\n            Append: \"-Wall -Wextra -Werror\"\n\nOverrideLinkFlags:\n    Linux:\n        \"g++\":\n            Append: \"-Wl,-rpath,\\\\$ORIGIN\"    # Add rpath for shared libraries\n</code></pre> <p>Warning</p> <p>Flag modifications are passed directly to the shell. Be cautious when using variables or user-provided input in your build commands.</p> <p>Note</p> <p>The default flags for each profile can be found in your user config file. Run <code>runcpp2 --show-config-path</code> to locate it.</p> Common Use Cases <pre><code>OverrideCompileFlags:\n    DefaultPlatform:\n        \"g++\":\n            Append: \"-O3\"                    # Optimize for speed\n        \"msvc\":\n            Append: \"/O2\"                    # Optimize for speed\n\nOverrideLinkFlags:\n    Windows:\n        \"msvc\":\n            Append: \"/SUBSYSTEM:WINDOWS\"     # Build as GUI application\n</code></pre>"},{"location":"guides/building_project_sources/#adding-source-files-and-include-paths","title":"Adding Source Files And Include Paths","text":"<p>You can add additional source files and include paths using <code>OtherFilesToBeCompiled</code> and <code>IncludePaths</code>. All paths are relative to the script file's location.</p> Example Project Structure<pre><code>project/\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 utils.cpp\n\u2502   \u2514\u2500\u2500 helper.cpp\n\u2514\u2500\u2500 include/\n    \u2514\u2500\u2500 utils.hpp\n    \u2514\u2500\u2500 helper.hpp\n</code></pre> Build Settings<pre><code>OtherFilesToBeCompiled:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"./src/utils.cpp\"\n        -   \"./src/helper.cpp\"\nIncludePaths:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"./include\"\n        -   \"./external/lib/include\"\n</code></pre> <p>Note</p> <p>You can specify different source files for different platforms/profiles: <pre><code>OtherFilesToBeCompiled:\n    Windows:\n        \"msvc\":\n        -   \"./src/windows_impl.cpp\"\n    Unix:\n        \"g++\":\n        -   \"./src/unix_impl.cpp\"\n</code></pre></p>"},{"location":"guides/building_project_sources/#globbing-source-files","title":"Globbing Source Files","text":"<p>Currently, wildcard/glob patterns are not supported but planned for future releases.</p>"},{"location":"guides/building_project_sources/#mixing-c-and-c","title":"Mixing C and C++","text":"<p>When building a project with a mixture of c and c++ files, the same profile will be used for all files. </p> <p>Note</p> <p>This is different from other build systems like CMake where it will use the c compiler for c files and the c++ compiler for c++ files. </p> <p>There's currently no way to specify different profiles for different source files, but this is planned for future releases.</p> <p>If you need the same behavior, you will need to create 2 script files and have the c++ script file depend on the c script file.</p> Example Project Structure<pre><code>project/\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 main.yaml\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 utils.c\n\u2502   \u2514\u2500\u2500 math.c\n\u2502   \u2514\u2500\u2500 helper.cpp\n\u2514\u2500\u2500 include/\n    \u2514\u2500\u2500 utils.h\n    \u2514\u2500\u2500 math.h\n    \u2514\u2500\u2500 helper.hpp\n</code></pre> src/utils.c<pre><code>/*runcpp2\nLanguage: \"c\"\nRequiredProfiles:\n    DefaultPlatform: [\"gcc\"]\nOtherFilesToBeCompiled:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"./math.c\"\nIncludePaths:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"../include\"\n*/\n#include \"utils.h\"\nint add(int a, int b) { return a + b; }\n</code></pre> <p>TODO: If the original utils.c or math.c is modified, the build will not be triggered.</p> main.yaml<pre><code>Dependencies:\n-   Name: \"utils\"\n    Source:\n        Local:\n            Path: \"./src\"\n    LibraryType: \"Static\"\n    IncludePaths:\n        -   \"./include\"\n    Build:\n        DefaultPlatform:\n            DefaultProfile:\n            # The whole ./src directory is copied, we just need to build utils.c as a static library\n            -   \"runcpp2 -b ./utils.c\"    \n    LinkProperties:\n        DefaultPlatform:\n            DefaultProfile:\n                SearchLibraryNames: [\"utils\"]\n                SearchDirectories: [\"./\"]\n</code></pre>"},{"location":"guides/building_project_sources/#adding-defines","title":"Adding Defines","text":"<p>You can add preprocessor definitions using the <code>Defines</code> setting. Defines can be specified with or without values:</p> Example <pre><code>Defines:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"DEBUG\"                    # Define without value (#define DEBUG)\n        -   \"VERSION_MAJOR=1\"          # Define with value (#define VERSION_MAJOR 1)\n        -   \"APP_NAME=\\\"MyApp\\\"\"       # Define with string value (#define APP_NAME \"MyApp\")\n</code></pre>"},{"location":"guides/building_project_sources/#adding-command-hooks","title":"Adding Command Hooks","text":"<p>runcpp2 provides four types of command hooks that run at different stages of the build:</p> <ol> <li> <p>Setup: Run once before the script is first built</p> <ul> <li>Runs at the script's location when no build directory exists</li> <li>Useful for one-time initialization</li> </ul> </li> <li> <p>PreBuild: Run before each build</p> <ul> <li>Runs in the build directory before compilation starts</li> <li>Useful for generating files or updating dependencies</li> </ul> </li> <li> <p>PostBuild: Run after each successful build</p> <ul> <li>Runs in the output directory where binaries are located</li> <li>Useful for copying resources or post-processing binaries</li> </ul> </li> <li> <p>Cleanup: Run when using the <code>--cleanup</code> option</p> <ul> <li>Runs at the script's location before the build directory is removed</li> <li>Useful for cleaning up generated files</li> </ul> </li> </ol> Example <pre><code>Setup:\n    Windows:\n        DefaultProfile:\n        -   \"echo Setting up in %cd%\"\n        -   \"mkdir assets\"\n\nPreBuild:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"python generate_version.py\"    # Generate version header\n\nPostBuild:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"cp -r assets/* .\"              # Copy assets to output\n\nCleanup:\n    DefaultPlatform:\n        DefaultProfile:\n        -   \"rm -rf assets\"                 # Clean up generated files\n</code></pre> <p>Warning</p> <p>All commands are passed directly to the shell. Be cautious when using variables or user-provided input in your commands.</p>"},{"location":"guides/building_project_sources/#intellisense-and-language-server-support","title":"Intellisense and language server support","text":""},{"location":"guides/external_dependencies/","title":"External Dependencies","text":""},{"location":"guides/external_dependencies/#adding-external-dependencies","title":"Adding External Dependencies","text":""},{"location":"guides/external_dependencies/#importing-dependency-info","title":"Importing Dependency Info","text":""},{"location":"guides/external_dependencies/#required-fields","title":"Required Fields","text":""},{"location":"guides/external_dependencies/#adding-setup-build-and-cleanup-commands","title":"Adding Setup, Build and Cleanup Commands","text":""},{"location":"guides/external_dependencies/#adding-include-paths-and-link-settings","title":"Adding Include Paths And Link Settings","text":""},{"location":"guides/external_dependencies/#copying-files","title":"Copying Files","text":""},{"location":"guides/scriptable_pipeline/","title":"Scriptable Pipeline","text":""}]}