# NOTE: All command substitutions are passed directly to the shell. 
#       Be cautious when using user-provided input in your build commands to avoid potential security risks.

# NOTE: All the options here are defaulted to empty. 
#       You can uncomment different sections to set what you want.

# (Optional) Whether to pass the script path as the second parameter when running
PassScriptPath: false

# # (Optional) Language of the script
Language: "c++"

# (Optional) Preferred profiles for the script for each platform.
#            Profiles are listed in user config file,
#            which can be retreived by running `runcpp2 --show-config-path`
#            Each of the platform dependent settings can be listed under
#            - Default
#            - Windows
#            - Linux
#            - MacOS
#            - Unix
RequiredProfiles: 
    Windows: ["g++"]
    Linux: ["g++"]
    MacOS: ["g++"]

# (Optional) Override the default compile flags for each platform.
OverrideCompileFlags:
    # Target Platform
    DefaultPlatform:
        # Profile with the respective flags to override. ("DefaultProfile" for any profile)
        "g++":
            # (Optional) Flags to be removed from the default compile flags, separated by space
            Remove: ""
            
            # (Optional) Additional flags to be appended to the default compile flags, separated by space
            Append: ""
    
# (Optional) Override the default link flags for each platform.
OverrideLinkFlags:
    # Target Platform
    DefaultPlatform:
        # Profile with the respective flags to override ("DefaultProfile" for any profile)
        "g++":
            # (Optional) Flags to be removed from the default link flags, separated by space
            Remove: ""
            
            # (Optional) Additional flags to be appended to the default link flags, 
            #            separated by space
            Append: ""

# (Optional) Other source files (relative to script file path) to be compiled.
OtherFilesToBeCompiled:
    # Target Platform
    DefaultPlatform:
        # Target Profile
        DefaultProfile:
        -   "./AnotherSourceFile.cpp"

# (Optional) Include paths (relative to script file path) for each platform and profile
IncludePaths:
    # Target Platform (DefaultPlatform, Windows, Linux, MacOS, or Unix)
    DefaultPlatform:
        # Target Profile (e.g., "g++", "clang++", "msvc", or "DefaultProfile" for any profile)
        DefaultProfile:
        -   "./include"
        -   "./src/include"

# (Optional) Define cross-compiler defines for each platform and profile.
# Defines can be specified as just a name or as a name-value pair.
Defines:
    # Target Platform (DefaultPlatform, Windows, Linux, MacOS, or Unix)
    DefaultPlatform:
        # Profile name (e.g., "g++", "clang++", "msvc", or "DefaultProfile" for any profile)
        DefaultProfile:
        -   "EXAMPLE_DEFINE"              # Define without a value
        -   "VERSION_MAJOR=1"             # Define with a value

# (Optional) Setup commands are run once before the script is first built.
# These commands are run at the script's location when no build directory exists.
Setup:
    # Target Platform (DefaultPlatform, Windows, Linux, MacOS, or Unix)
    DefaultPlatform:
        # Profile name (e.g., "g++", "clang++", "msvc", or "DefaultProfile" for any profile)
        DefaultProfile:
        # List of setup commands
        -   "echo Setting up script..."

# (Optional) PreBuild commands are run before each build.
# These commands are run in the build directory before compilation starts.
PreBuild:
    # Target Platform
    DefaultPlatform:
        # Profile name
        DefaultProfile:
        -   "echo Starting build..."

# (Optional) PostBuild commands are run after each successful build.
# These commands are run in the output directory where binaries are located.
PostBuild:
    # Target Platform
    DefaultPlatform:
        # Profile name
        DefaultProfile:
        -   "echo Build completed..."

# (Optional) Cleanup commands are run when using the --cleanup option.
# These commands are run at the script's location before the build directory is removed.
Cleanup:
    # Target Platform
    DefaultPlatform:
        # Profile name
        DefaultProfile:
        -   "echo Cleaning up script..."

# (Optional) The list of dependencies needed by the script
Dependencies:
    # Dependency name
-   Name: MyLibrary
    
    # Supported platforms of the dependency
    Platforms: [Windows, Linux, MacOS]
    
    # The source of getting the dependency (Git, Local)
    Source:
        # (Optional) Import dependency configuration from a YAML file
        # For Git source: Path is relative to the git repository root
        # For Local source: Path is relative to the script directory.
        # If neither source exists, local source with root script directory is assumed.
        # ImportPath: "config/dependency.yaml"
        
        # Git: Dependency or import YAML file exists in a git server, and needs to be cloned.
        Git:
            # Git repository URL
            URL: "https://github.com/MyUser/MyLibrary.git"
        
        # Local: Dependency or import YAML file exists in local filesystem
        # Local:
        #     # Path to the library directory
        #     Path: "./libs/LocalLibrary"


    # Library Type (Static, Object, Shared, Header)
    LibraryType: Static
    
    # (Optional) Paths to be added to the include paths, relative to the dependency folder
    IncludePaths:
    -   "src/include"
    
    # (Optional if LibraryType is Header) Link properties of the dependency
    LinkProperties:
        # Properties for searching the library binary for each platform
        DefaultPlatform:
            # Profile-specific properties
            "g++":
                # The library names to be searched for when linking against the script. 
                # Binaries with linkable extension that contains one of the names will be linked
                SearchLibraryNames: ["MyLibrary"]
                
                # (Optional) The library names to be excluded from being searched.
                # Works the same as SearchLibraryNames but will NOT be linked instead
                ExcludeLibraryNames: []
                
                # The path (relative to the dependency folder) to be searched for the dependency binaries
                SearchDirectories: ["./build"]
                
                # (Optional) Additional link flags for this dependency
                AdditionalLinkOptions: []
    
    # (Optional) Setup commands are run once when the dependency is populated
    Setup:
        # Target Platform
        DefaultPlatform:
            # Setup shell commands for the specified profile. 
            # Default commands are run in the dependency folder
            # You can also use "DefaultProfile" if all the compilers run the same setup commands
            "g++":
            -   "mkdir build"
            
    
    # (Optional) Build commands are run every time before the script is being built
    Build:
        # Target Platform
        DefaultPlatform:
            # Target Profile ("DefaultProfile" for any profile)
            "g++":
            -   "cd build && cmake .."
            -   "cd build && cmake --build ."
    
    # (Optional) Cleanup commands are run when the reset option is present. Normally nothing needs
    #            to be done since the dependency folder will be removed automatically.
    Cleanup:
        Linux:
            "g++":
            -   "sudo apt purge MyLibrary"

    # (Optional) Files to be copied to next to output binary for each platform and profile
    FilesToCopy:
        # Target Platform (DefaultPlatform, Windows, Linux, MacOS, or Unix)
        DefaultPlatform:
            # Profile name (e.g., "g++", "clang++", "msvc", or "DefaultProfile" for any profile)
            DefaultProfile:
            # List of files to copy (relative to the dependency folder)
            -  "assets/textures/sprite.png"
        Windows:
            "msvc":
            -  "assets/textures/sprite.png"
            -  "assets/fonts/windows_specific_font.ttf"
        Linux:
            "g++":
            -  "assets/textures/sprite.png"
            -  "assets/shaders/linux_optimized_shader.glsl"
