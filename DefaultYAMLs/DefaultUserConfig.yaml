# yaml-language-server: $schema=./UserConfigSchema.json

---
# A profile to be used if not specified while running the build script
PreferredProfile: "g++"

# List of compiler/linker profiles that instruct how to compile/link
Profiles:
-   Name: "g++"
    
    # The file extensions associated with the profile
    FileExtensions: [cpp, cc, cxx]
    
    # The languages supported by the profile
    Languages: ["c++"]
    
    # (Optional) Steps to run before calling the compiler/linker. 
    #            This is run inside the .runcpp2 directory where the build happens.
    # SetupSteps: 
    #     # Applies to all platforms (Can be changed to Linux, MacOS, Windows, Unix, etc.)
    #     All: []
    
    # The following fields set the prefixes and extensions for each type of the files
    # If the name of an object files are libtest.so and libtest2.so,
    #   the prefixes and extensions are "lib" and ".so"
    
    # Each of the platform dependent settings can be listed under
    # - All
    # - Windows
    # - Linux
    # - MacOS
    # - Unix
    
    # The file properties for the object files for each platform.
    ObjectLinkFile:
        Prefix:
            All: ""
        Extension:
            Windows: ".obj"
            Unix: ".o"
    
    # The file properties for the files to be **linked** as shared libraries for each platform
    SharedLinkFile:
        Prefix:
            Windows: ""
            Linux: "lib"
            MacOS: ""
        Extension:
            Windows: ".lib"
            Linux: ".so"
            MacOS: ".dylib"
    
    # The file properties for the files to be **copied** as shared libraries for each platform
    SharedLibraryFile:
        Prefix:
            Windows: ""
            Linux: "lib"
            MacOS: ""
        Extension:
            Windows: ".dll"
            Linux: ".so"
            MacOS: ".dylib"
    
    # The file properties for the files to be linked as static libraries for each platform
    StaticLinkFile:
        Prefix:
            Unix: "lib"
            Windows: ""
        Extension:
            Windows: ".lib"
            Unix: ".a"
    
    # (Optional) The file properties for debug symbols to be copied alongside the binary 
    #   for each platform
    # DebugSymbolFile:
    #     Prefix:
    #         Windows: ""
    #         Unix: ""
    #     Extension:
    #         Windows: ""
    #         Unix: ""
    
    # Specify the compiler settings
    Compiler:
        # (Optional) The command to run together before running each compile command
        #   in **shell** for each platform
        # EnvironmentSetup: 
        #     All: ""
        
        # Executable to be called
        Executable: "g++"
        
        # Default arguments to provide for compilation which can be overridden 
        #   by the script for each platform
        DefaultCompileFlags: 
            All: "-std=c++17 -Wall -Werror"
        
        # Flags for compiling to an executable for each platform
        ExecutableCompileFlags: 
            All: ""
        
        # Flags for compiling to a static library for each platform
        StaticLibCompileFlags: 
            All: ""
        
        # Flags for compiling to a shared library for each platform
        SharedLibCompileFlags: 
            All: "-fpic"
        
        # The compile syntax in shell for a given file:
        # {Executable} {CompilePart} [ {IncludePart}...(for each dependency) ] 
        #   {InputPart} {OutputPart}
        CompileArgs: 
            # {CompileFlags} will be replaced by *CompileFlags set above depending on what 
            #   we are compiling
            CompilePart: "-c {CompileFlags}"
            
            # {IncludeDirectoryPath} will be replaced by the IncludePaths set by the dependencies
            IncludePart: "-I{IncludeDirectoryPath}"
            
            # {InputFilePath} will be replaced by the path to the script we are trying to compile
            InputPart: "{InputFilePath}"
            
            # {ObjectFilePath} will be replaced by the path to the output object file
            OutputPart: "-o {ObjectFilePath}"

    # Specify the linker settings
    Linker:
        # (Optional) The command to run together before running each link command 
        #   in **shell** for each platform
        # EnvironmentSetup: 
        #     All: ""
        
        # Executable to be called
        Executable: "g++"
        
        # Default arguments to provide for linking dependencies to the binary, 
        #   which can be overridden by the script for each platform
        DefaultLinkFlags: 
            All: ""
        
        # Flags for linking as an executable for each platform
        ExecutableLinkFlags: 
            All: "-Wl,-rpath,\\$ORIGIN"
        
        # Flags for linking as a static library for each platform
        StaticLibLinkFlags: 
            All: ""
        
        # Flags for linking as a shared library for each platform
        SharedLibLinkFlags: 
            Unix: "-shared -Wl,-rpath,\\$ORIGIN"
            Windows: "-shared -Wl,-rpath,$ORIGIN"
        
        # The link syntax in shell for a given file:
        # {OutputPart} {LinkPart}...(for script object file and each dependencies if any)
        LinkArgs:
            # {LinkFlags} will be replaced by *LinkFlags set above depending on what 
            #   we are linking to
            #
            # {OutputFilePath} will be replaced by the path to the output file
            OutputPart: "{LinkFlags} -o {OutputFilePath}"
            
            # {LinkFilePath} will be replaced by the path to the object file 
            #   we are linking against
            LinkPart: "{LinkFilePath}"
