# List of anchors that will be aliased later
Templates:
    MSVC_CompileFlags: &MSVC_CompileFlags
        Flags: "/nologo /W4 /diagnostics:caret /D NDEBUG /utf-8 /Gm- /MD /EHa /TP /std:c++17 /GR /TP"
    
    "g++_CompileRunParts": &g++_CompileRunParts
    -   Type: Once
        CommandPart: "{Executable} -c {CompileFlags}"
    -   Type: Repeats
        CommandPart: " -D{DefineNameOnly}="
    -   Type: Repeats
        CommandPart: " \"-D{DefineName}={DefineValue}\""
    -   Type: Repeats
        CommandPart: " -I\"{IncludeDirectoryPath}\""
    -   Type: Once
        CommandPart: " \"{InputFilePath}\" -o \"{OutputFilePath}\""
    
    "g++_LinkRunParts": &g++_LinkRunParts
    -   Type: Once
        CommandPart: "{Executable} {LinkFlags} -o \"{OutputFilePath}\""
    -   Type: Repeats
        CommandPart: " \"{LinkFilePath}\""
    
    "vs2022_v17+_CompileRunParts": &vs2022_v17+_CompileRunParts
    -   Type: Once
        CommandPart: "{Executable} /c {CompileFlags}"
    -   Type: Repeats
        CommandPart: " /D{DefineNameOnly}="
    -   Type: Repeats
        CommandPart: " \"/D{DefineName}={DefineValue}\""
    -   Type: Repeats
        CommandPart: " /I\"{IncludeDirectoryPath}\""
    -   Type: Once
        CommandPart: " /Fo\"{OutputFilePath}\" \"{InputFilePath}\""
    
    "vs2022_v17+_LinkRunParts": &vs2022_v17+_LinkRunParts
    -   Type: Once
        CommandPart: "{Executable} {LinkFlags} /OUT:\"{OutputFilePath}\""
    -   Type: Repeats
        CommandPart: " \"{LinkFilePath}\""
    
    # The following fields set the prefixes and extensions for each type of the files
    # If the name of an object files are libtest.so and libtest2.so,
    #   the prefixes and extensions are "lib" and ".so"
    
    # TODO: Add support for custom platform
    # Each of the platform dependent settings can be listed under
    # - DefaultPlatform
    # - Windows
    # - Linux
    # - MacOS
    # - Unix
    FilesTypes: &CommonFilesTypes
        ObjectLinkFile:
            Prefix:
                DefaultPlatform: ""
            Extension:
                Windows: ".obj"
                Unix: ".o"
        
        # The file properties for the files to be **linked** as shared libraries for each platform
        SharedLinkFile:
            Prefix:
                Windows: ""
                Linux: "lib"
                MacOS: ""
            Extension:
                Windows: ".lib"
                Linux: ".so"
                MacOS: ".dylib"
        
        # The file properties for the files to be **copied** as shared libraries for each platform
        SharedLibraryFile:
            Prefix:
                Windows: ""
                Linux: "lib"
                MacOS: ""
            Extension:
                Windows: ".dll"
                Linux: ".so"
                MacOS: ".dylib"
        
        # The file properties for the files to be linked as static libraries for each platform
        StaticLinkFile:
            Prefix:
                Unix: "lib"
                Windows: ""
            Extension:
                Windows: ".lib"
                Unix: ".a"

        # (Optional) The file properties for debug symbols to be copied alongside the binary 
        #               for each platform
        DebugSymbolFile:
            Prefix:
                Windows: ""
                Unix: ""
            Extension:
                Windows: ""
                Unix: ""

# WARNING: All command substitutions in this file are passed directly to the shell.
#          Exercise caution when using variables or user-provided input in your build commands
#          to prevent potential security vulnerabilities.

# A profile to be used if not specified while running the build script
PreferredProfile: "g++"

# List of compiler/linker profiles that instruct how to compile/link
Profiles:
    # Name (case sensitive) of the profile that can be queried from a script
-   Name: "g++"
    
    # (Optional) Name aliases (case sensitive) of the current profile
    NameAliases: ["mingw"]
    
    # The file extensions associated with the profile
    FileExtensions: [.cpp, .cc, .cxx]
    
    # The languages supported by the profile
    Languages: ["c++"]
    
    # (Optional) The commands to run in **shell** before calling the compiler/linker for each platform.
    #            This is run inside the .runcpp2 directory where the build happens.
    # Setup: 
    #     DefaultPlatform: []
    
    # (Optional) The commands to run in **shell** after calling the compiler/linker for each platform.
    #            This is run inside the .runcpp2 directory where the build happens.
    # Cleanup: 
    #     DefaultPlatform: []
    
    # The file properties for the object files for each platform.
    FilesTypes: *CommonFilesTypes
    
    # Specify the compiler settings
    Compiler:
        # (Optional) The command to be prepend for each compile command in **shell** for each platform
        # PreRun: 
        #     DefaultPlatform: ""
        
        # Shell command to use for checking if the executable exists or not
        CheckExistence: 
            DefaultPlatform: "g++ -v"
        
        # Here are a list of substitution strings for RunParts, Setup and Cleanup
        # {Executable}:             Compiler executable
        # {CompileFlags}:           Compile flags from config and override
        # {IncludeDirectoryPath}:   Path to include directories for both the script and dependencies
        # {DefineNameOnly}:         Name of a macro to be defined without a value (equivalent to #define X)
        # {DefineName}:             Name of a macro to be defined with a value
        # {DefineValue}:            Value of a macro to be defined (used with {DefineName})
        
        # {InputFileName}:          Name of the input file (without directory path and extension)
        # {InputFileExtension}:     Extension of the input file
        # {InputFileDirectory}:     Directory of the input file
        # {InputFilePath}:          Full path to the input file
        
        # {OutputFileName}:         Name of the output (object) file (without directory path and extension)
        # {OutputFileExtension}:    (Similar to previous)
        # {OutputFileDirectory}:    (Similar to previous)
        # {OutputFilePath}:         (Similar to previous)
        CompileTypes:
            Executable:
                DefaultPlatform:
                    Flags: "-std=c++17 -Wall -g"
                    Executable: "g++"
                    RunParts: *g++_CompileRunParts
                    # (Optional) The commands to run in **shell** BEFORE compiling
                    #            This is run inside the .runcpp2 directory where the build happens.
                    # Setup: []
                    # (Optional) The commands to run in **shell** AFTER compiling
                    #            This is run inside the .runcpp2 directory where the build happens.
                    # Cleanup: []
            Static:
                DefaultPlatform:
                    Flags: "-std=c++17 -Wall -g"
                    Executable: "g++"
                    RunParts: *g++_CompileRunParts
                    # Setup: []
                    # Cleanup: []
            Shared:
                DefaultPlatform:
                    Flags: "-std=c++17 -Wall -g -fpic"
                    Executable: "g++"
                    RunParts: *g++_CompileRunParts
                    # Setup: []
                    # Cleanup: []
    
    # Specify the linker settings
    Linker:
        # (Optional) The command to be prepend for each link command in **shell** for each platform
        # PreRun: 
        #     DefaultPlatform: ""
        
        # Shell command to use for checking if the executable exists or not
        CheckExistence:
            DefaultPlatform: "g++ -v"
        
        # Here are a list of substitution strings for RunParts, Setup and Cleanup
        # {Executable}:                 Linker executable
        # {LinkFlags}:                  Link flags from config and override
        
        # {LinkFileName}:               Name of the file to be linked. Any files we are linking will be substituted
        # {LinkFileExtension}:          (Similar to previous)
        # {LinkFileDirectory}:          (Similar to previous)
        # {LinkFilePath}:               (Similar to previous)
        
        # {LinkObjectFileName}:         Name of the object file to be linked. Only object file will be substituted
        # {LinkObjectFileExtension}:    (Similar to previous)
        # {LinkObjectFileDirectory}:    (Similar to previous)
        # {LinkObjectFilePath}:         (Similar to previous)
        
        # {LinkSharedFileName}:         (Similar to previous)
        # {LinkSharedFileExtension}:    (Similar to previous)
        # {LinkSharedFileDirectory}:    (Similar to previous)
        # {LinkSharedFilePath}:         (Similar to previous)
        
        # {LinkStaticFileName}:         (Similar to previous)
        # {LinkStaticFileExtension}:    (Similar to previous)
        # {LinkStaticFileDirectory}:    (Similar to previous)
        # {LinkStaticFilePath}:         (Similar to previous)
        
        # {OutputFileName}:             (Similar to previous)
        # {OutputFileExtension}:        (Similar to previous)
        # {OutputFileDirectory}:        (Similar to previous)
        # {OutputFilePath}:             (Similar to previous)
        LinkTypes:
            Executable:
                Unix:
                    Flags: "-Wl,-rpath,\\$ORIGIN"
                    Executable: "g++"
                    RunParts: *g++_LinkRunParts
                    # Setup: []
                    # Cleanup: []
                Windows:
                    Flags: "-Wl,-rpath,\\$ORIGIN"
                    Executable: "g++"
                    RunParts: *g++_LinkRunParts
                    # Setup: []
                    # Cleanup: []
            Static:
                DefaultPlatform:
                    Flags: ""
                    Executable: "g++"
                    RunParts: *g++_LinkRunParts
                    # Setup: []
                    # Cleanup: []
            Shared:
                Unix:
                    Flags: "-shared -Wl,-rpath,\\$ORIGIN"
                    Executable: "g++"
                    RunParts: *g++_LinkRunParts
                    # Setup: []
                    # Cleanup: []
                Windows:
                    Flags: "-shared -Wl,-rpath,\\$ORIGIN"
                    Executable: "g++"
                    RunParts: *g++_LinkRunParts
                    # Setup: []
                    # Cleanup: []

# https://learn.microsoft.com/en-us/cpp/overview/compiler-versions?view=msvc-170
-   Name: "vs2022_v17+"
    NameAliases: ["msvc1930+", "msvc"]
    Languages: ["c++"]
    FileExtensions: [.cpp, .cc, .cxx]
    FilesTypes: *CommonFilesTypes
    Setup: 
        Windows:
        -   >-
            for /f "usebackq tokens=*" %i in (`CALL "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" 
            -version "[17.0,18.0)" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do ( 
            echo "%i\VC\Auxiliary\Build\vcvarsall.bat" x64 > .\prerun.bat
            )
    Cleanup: 
        Windows: [ "del .\\prerun.bat" ]
    Compiler:
        PreRun: 
            Windows: ".\\prerun.bat"
        CheckExistence: 
            Windows: "where.exe CL.exe"
        CompileTypes:
            Executable:
                Windows:
                    <<: *MSVC_CompileFlags
                    Executable: "CL.exe"
                    RunParts: *vs2022_v17+_CompileRunParts
            Static:
                Windows:
                    <<: *MSVC_CompileFlags
                    Executable: "CL.exe"
                    RunParts: *vs2022_v17+_CompileRunParts
            Shared:
                Windows:
                    <<: *MSVC_CompileFlags
                    Executable: "CL.exe"
                    RunParts: *vs2022_v17+_CompileRunParts
    # Specify the linker settings
    Linker:
        PreRun: 
            Windows: ".\\prerun.bat"
        CheckExistence:
            Windows: "where.exe link.exe"
        LinkTypes:
            Executable:
                Windows:
                    Flags: >-
                        /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib
                        oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /manifest:embed /SUBSYSTEM:CONSOLE
                    Executable: "link.exe"
                    RunParts: *vs2022_v17+_LinkRunParts
            Static:
                Windows:
                    Flags: "/NOLOGO"
                    Executable: "lib.exe"
                    RunParts: *vs2022_v17+_LinkRunParts
            Shared:
                Windows:
                    Flags: >-
                        /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib
                        oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /manifest:embed /SUBSYSTEM:CONSOLE
                        /DLL
                    Executable: "link.exe"
                    RunParts:
                    -   Type: Once
                        CommandPart: "{Executable} {LinkFlags} /OUT:\"{OutputFilePath}\" /DEF:\".\\temp.def\""
                    -   Type: Repeats
                        CommandPart: " \"{LinkFilePath}\""
                    Setup: [ "echo EXPORTS > .\\temp.def", "echo.   main @1 >> .\\temp.def" ]
                    Cleanup: [ "del .\\temp.def" ]
